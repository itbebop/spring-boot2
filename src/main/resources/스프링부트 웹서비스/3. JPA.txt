ㅇ 기존 관계형 데이터베이스 (Relational DB) 사용함으로 발생하는 문제
	- 애플리케이션 코드가 아닌 SQL이 중심이 됨
	- 패러다임 불일치 문제
	  즉, 관계형 데이터베이스는 어떻게 데이터를 저장할지에 초점이 맞춰진 기술임에 반해,
	  APP 소스는 객체지향 프로그래밍으로 기능과 속성을 한 곳에서 관리함
	  
ㅇ JPA란 
	- 자바 표준 ORM(Object Relational Mapping)
	- MyBatis, iBatis는 ORM이 아님
	- ORM은 객체를 매핑하는 것이고, SQL Mapper는 쿼리를 매핑함
	- JPA는 인터페이스로서 자바 표준명세서이므로 JPA를 사용하기 위해서는 구현체가 필요함
	 ex) Hibernate, Eclipse Link 등
	- 구현체들을 좀 더 쉽게 사용하고자 추상화시킨 Spring Data JPA라는 모듈을 이용하여 JPA를 다룸
	 ex) JPA <- Hibernate <- Spring Data JPA (한 단계 더 감싸놓음)
	 
ㅇ Spring Data JPA
	- 등장한 이유  
	 1) 구현체 교체의 용이성
	   - Hibernate 외의 다른 구현체로 쉽게 교체 가능
	 2) 저장소 교체의 용이성
	   - 관계형 데이터베이스 외에 다른 저장소로 쉽게 교체 가능
	    ex) 관계형 데이터베이스 -> MongoDB로 교체가 필요하면
		Spring Data JPA에서 Spring Data MongoDB로 의존성만 교체하면 됨
	   - 이건 Spring Data의 하위 프로젝트들이 기본적인 CRUD의 인터페이스가 같기 때문에 가능함
	   - 하위 프로젝트란 Spring Data JPA, Spring Data Redis, Spring Data MongoDB
	   
ㅇ 프로젝트에 Spring Data JPA 적용하기
	1) build.gradle 에 의존성 등록
	